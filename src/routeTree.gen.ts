/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as ShedRegisterIndexImport } from './routes/shed-register/index'
import { Route as SearchIndexImport } from './routes/search/index'
import { Route as AdminIndexImport } from './routes/admin/index'
import { Route as AddListingIndexImport } from './routes/add-listing/index'

// Create Virtual Routes

const ProfileProfileIdLazyImport = createFileRoute('/profile/$profileId')()
const PostPostIdLazyImport = createFileRoute('/post/$postId')()
const AdminUsersManageIndexLazyImport = createFileRoute(
  '/admin/users/manage/',
)()
const AdminPostsRejectedIndexLazyImport = createFileRoute(
  '/admin/posts/rejected/',
)()
const AdminPostsPendingIndexLazyImport = createFileRoute(
  '/admin/posts/pending/',
)()
const AdminPostsApprovedIndexLazyImport = createFileRoute(
  '/admin/posts/approved/',
)()
const AdminUsersManageProfileIdLazyImport = createFileRoute(
  '/admin/users/manage/$profileId',
)()
const AdminPostsPendingPostIdLazyImport = createFileRoute(
  '/admin/posts/pending/$postId',
)()
const AdminPostsApprovedPostIdLazyImport = createFileRoute(
  '/admin/posts/approved/$postId',
)()

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ShedRegisterIndexRoute = ShedRegisterIndexImport.update({
  id: '/shed-register/',
  path: '/shed-register/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/shed-register/index.lazy').then((d) => d.Route),
)

const SearchIndexRoute = SearchIndexImport.update({
  id: '/search/',
  path: '/search/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/search/index.lazy').then((d) => d.Route))

const AdminIndexRoute = AdminIndexImport.update({
  id: '/admin/',
  path: '/admin/',
  getParentRoute: () => rootRoute,
} as any)

const AddListingIndexRoute = AddListingIndexImport.update({
  id: '/add-listing/',
  path: '/add-listing/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/add-listing/index.lazy').then((d) => d.Route),
)

const ProfileProfileIdLazyRoute = ProfileProfileIdLazyImport.update({
  id: '/profile/$profileId',
  path: '/profile/$profileId',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/profile/$profileId.lazy').then((d) => d.Route),
)

const PostPostIdLazyRoute = PostPostIdLazyImport.update({
  id: '/post/$postId',
  path: '/post/$postId',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/post/$postId.lazy').then((d) => d.Route))

const AdminUsersManageIndexLazyRoute = AdminUsersManageIndexLazyImport.update({
  id: '/admin/users/manage/',
  path: '/admin/users/manage/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/admin/users/manage/index.lazy').then((d) => d.Route),
)

const AdminPostsRejectedIndexLazyRoute =
  AdminPostsRejectedIndexLazyImport.update({
    id: '/admin/posts/rejected/',
    path: '/admin/posts/rejected/',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/admin/posts/rejected/index.lazy').then((d) => d.Route),
  )

const AdminPostsPendingIndexLazyRoute = AdminPostsPendingIndexLazyImport.update(
  {
    id: '/admin/posts/pending/',
    path: '/admin/posts/pending/',
    getParentRoute: () => rootRoute,
  } as any,
).lazy(() =>
  import('./routes/admin/posts/pending/index.lazy').then((d) => d.Route),
)

const AdminPostsApprovedIndexLazyRoute =
  AdminPostsApprovedIndexLazyImport.update({
    id: '/admin/posts/approved/',
    path: '/admin/posts/approved/',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/admin/posts/approved/index.lazy').then((d) => d.Route),
  )

const AdminUsersManageProfileIdLazyRoute =
  AdminUsersManageProfileIdLazyImport.update({
    id: '/admin/users/manage/$profileId',
    path: '/admin/users/manage/$profileId',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/admin/users/manage/$profileId.lazy').then((d) => d.Route),
  )

const AdminPostsPendingPostIdLazyRoute =
  AdminPostsPendingPostIdLazyImport.update({
    id: '/admin/posts/pending/$postId',
    path: '/admin/posts/pending/$postId',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/admin/posts/pending/$postId.lazy').then((d) => d.Route),
  )

const AdminPostsApprovedPostIdLazyRoute =
  AdminPostsApprovedPostIdLazyImport.update({
    id: '/admin/posts/approved/$postId',
    path: '/admin/posts/approved/$postId',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/admin/posts/approved/$postId.lazy').then((d) => d.Route),
  )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/post/$postId': {
      id: '/post/$postId'
      path: '/post/$postId'
      fullPath: '/post/$postId'
      preLoaderRoute: typeof PostPostIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/profile/$profileId': {
      id: '/profile/$profileId'
      path: '/profile/$profileId'
      fullPath: '/profile/$profileId'
      preLoaderRoute: typeof ProfileProfileIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/add-listing/': {
      id: '/add-listing/'
      path: '/add-listing'
      fullPath: '/add-listing'
      preLoaderRoute: typeof AddListingIndexImport
      parentRoute: typeof rootRoute
    }
    '/admin/': {
      id: '/admin/'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminIndexImport
      parentRoute: typeof rootRoute
    }
    '/search/': {
      id: '/search/'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchIndexImport
      parentRoute: typeof rootRoute
    }
    '/shed-register/': {
      id: '/shed-register/'
      path: '/shed-register'
      fullPath: '/shed-register'
      preLoaderRoute: typeof ShedRegisterIndexImport
      parentRoute: typeof rootRoute
    }
    '/admin/posts/approved/$postId': {
      id: '/admin/posts/approved/$postId'
      path: '/admin/posts/approved/$postId'
      fullPath: '/admin/posts/approved/$postId'
      preLoaderRoute: typeof AdminPostsApprovedPostIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/admin/posts/pending/$postId': {
      id: '/admin/posts/pending/$postId'
      path: '/admin/posts/pending/$postId'
      fullPath: '/admin/posts/pending/$postId'
      preLoaderRoute: typeof AdminPostsPendingPostIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/admin/users/manage/$profileId': {
      id: '/admin/users/manage/$profileId'
      path: '/admin/users/manage/$profileId'
      fullPath: '/admin/users/manage/$profileId'
      preLoaderRoute: typeof AdminUsersManageProfileIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/admin/posts/approved/': {
      id: '/admin/posts/approved/'
      path: '/admin/posts/approved'
      fullPath: '/admin/posts/approved'
      preLoaderRoute: typeof AdminPostsApprovedIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/admin/posts/pending/': {
      id: '/admin/posts/pending/'
      path: '/admin/posts/pending'
      fullPath: '/admin/posts/pending'
      preLoaderRoute: typeof AdminPostsPendingIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/admin/posts/rejected/': {
      id: '/admin/posts/rejected/'
      path: '/admin/posts/rejected'
      fullPath: '/admin/posts/rejected'
      preLoaderRoute: typeof AdminPostsRejectedIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/admin/users/manage/': {
      id: '/admin/users/manage/'
      path: '/admin/users/manage'
      fullPath: '/admin/users/manage'
      preLoaderRoute: typeof AdminUsersManageIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/post/$postId': typeof PostPostIdLazyRoute
  '/profile/$profileId': typeof ProfileProfileIdLazyRoute
  '/add-listing': typeof AddListingIndexRoute
  '/admin': typeof AdminIndexRoute
  '/search': typeof SearchIndexRoute
  '/shed-register': typeof ShedRegisterIndexRoute
  '/admin/posts/approved/$postId': typeof AdminPostsApprovedPostIdLazyRoute
  '/admin/posts/pending/$postId': typeof AdminPostsPendingPostIdLazyRoute
  '/admin/users/manage/$profileId': typeof AdminUsersManageProfileIdLazyRoute
  '/admin/posts/approved': typeof AdminPostsApprovedIndexLazyRoute
  '/admin/posts/pending': typeof AdminPostsPendingIndexLazyRoute
  '/admin/posts/rejected': typeof AdminPostsRejectedIndexLazyRoute
  '/admin/users/manage': typeof AdminUsersManageIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/post/$postId': typeof PostPostIdLazyRoute
  '/profile/$profileId': typeof ProfileProfileIdLazyRoute
  '/add-listing': typeof AddListingIndexRoute
  '/admin': typeof AdminIndexRoute
  '/search': typeof SearchIndexRoute
  '/shed-register': typeof ShedRegisterIndexRoute
  '/admin/posts/approved/$postId': typeof AdminPostsApprovedPostIdLazyRoute
  '/admin/posts/pending/$postId': typeof AdminPostsPendingPostIdLazyRoute
  '/admin/users/manage/$profileId': typeof AdminUsersManageProfileIdLazyRoute
  '/admin/posts/approved': typeof AdminPostsApprovedIndexLazyRoute
  '/admin/posts/pending': typeof AdminPostsPendingIndexLazyRoute
  '/admin/posts/rejected': typeof AdminPostsRejectedIndexLazyRoute
  '/admin/users/manage': typeof AdminUsersManageIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/post/$postId': typeof PostPostIdLazyRoute
  '/profile/$profileId': typeof ProfileProfileIdLazyRoute
  '/add-listing/': typeof AddListingIndexRoute
  '/admin/': typeof AdminIndexRoute
  '/search/': typeof SearchIndexRoute
  '/shed-register/': typeof ShedRegisterIndexRoute
  '/admin/posts/approved/$postId': typeof AdminPostsApprovedPostIdLazyRoute
  '/admin/posts/pending/$postId': typeof AdminPostsPendingPostIdLazyRoute
  '/admin/users/manage/$profileId': typeof AdminUsersManageProfileIdLazyRoute
  '/admin/posts/approved/': typeof AdminPostsApprovedIndexLazyRoute
  '/admin/posts/pending/': typeof AdminPostsPendingIndexLazyRoute
  '/admin/posts/rejected/': typeof AdminPostsRejectedIndexLazyRoute
  '/admin/users/manage/': typeof AdminUsersManageIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/post/$postId'
    | '/profile/$profileId'
    | '/add-listing'
    | '/admin'
    | '/search'
    | '/shed-register'
    | '/admin/posts/approved/$postId'
    | '/admin/posts/pending/$postId'
    | '/admin/users/manage/$profileId'
    | '/admin/posts/approved'
    | '/admin/posts/pending'
    | '/admin/posts/rejected'
    | '/admin/users/manage'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/post/$postId'
    | '/profile/$profileId'
    | '/add-listing'
    | '/admin'
    | '/search'
    | '/shed-register'
    | '/admin/posts/approved/$postId'
    | '/admin/posts/pending/$postId'
    | '/admin/users/manage/$profileId'
    | '/admin/posts/approved'
    | '/admin/posts/pending'
    | '/admin/posts/rejected'
    | '/admin/users/manage'
  id:
    | '__root__'
    | '/'
    | '/post/$postId'
    | '/profile/$profileId'
    | '/add-listing/'
    | '/admin/'
    | '/search/'
    | '/shed-register/'
    | '/admin/posts/approved/$postId'
    | '/admin/posts/pending/$postId'
    | '/admin/users/manage/$profileId'
    | '/admin/posts/approved/'
    | '/admin/posts/pending/'
    | '/admin/posts/rejected/'
    | '/admin/users/manage/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PostPostIdLazyRoute: typeof PostPostIdLazyRoute
  ProfileProfileIdLazyRoute: typeof ProfileProfileIdLazyRoute
  AddListingIndexRoute: typeof AddListingIndexRoute
  AdminIndexRoute: typeof AdminIndexRoute
  SearchIndexRoute: typeof SearchIndexRoute
  ShedRegisterIndexRoute: typeof ShedRegisterIndexRoute
  AdminPostsApprovedPostIdLazyRoute: typeof AdminPostsApprovedPostIdLazyRoute
  AdminPostsPendingPostIdLazyRoute: typeof AdminPostsPendingPostIdLazyRoute
  AdminUsersManageProfileIdLazyRoute: typeof AdminUsersManageProfileIdLazyRoute
  AdminPostsApprovedIndexLazyRoute: typeof AdminPostsApprovedIndexLazyRoute
  AdminPostsPendingIndexLazyRoute: typeof AdminPostsPendingIndexLazyRoute
  AdminPostsRejectedIndexLazyRoute: typeof AdminPostsRejectedIndexLazyRoute
  AdminUsersManageIndexLazyRoute: typeof AdminUsersManageIndexLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PostPostIdLazyRoute: PostPostIdLazyRoute,
  ProfileProfileIdLazyRoute: ProfileProfileIdLazyRoute,
  AddListingIndexRoute: AddListingIndexRoute,
  AdminIndexRoute: AdminIndexRoute,
  SearchIndexRoute: SearchIndexRoute,
  ShedRegisterIndexRoute: ShedRegisterIndexRoute,
  AdminPostsApprovedPostIdLazyRoute: AdminPostsApprovedPostIdLazyRoute,
  AdminPostsPendingPostIdLazyRoute: AdminPostsPendingPostIdLazyRoute,
  AdminUsersManageProfileIdLazyRoute: AdminUsersManageProfileIdLazyRoute,
  AdminPostsApprovedIndexLazyRoute: AdminPostsApprovedIndexLazyRoute,
  AdminPostsPendingIndexLazyRoute: AdminPostsPendingIndexLazyRoute,
  AdminPostsRejectedIndexLazyRoute: AdminPostsRejectedIndexLazyRoute,
  AdminUsersManageIndexLazyRoute: AdminUsersManageIndexLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/post/$postId",
        "/profile/$profileId",
        "/add-listing/",
        "/admin/",
        "/search/",
        "/shed-register/",
        "/admin/posts/approved/$postId",
        "/admin/posts/pending/$postId",
        "/admin/users/manage/$profileId",
        "/admin/posts/approved/",
        "/admin/posts/pending/",
        "/admin/posts/rejected/",
        "/admin/users/manage/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/post/$postId": {
      "filePath": "post/$postId.lazy.tsx"
    },
    "/profile/$profileId": {
      "filePath": "profile/$profileId.lazy.tsx"
    },
    "/add-listing/": {
      "filePath": "add-listing/index.tsx"
    },
    "/admin/": {
      "filePath": "admin/index.tsx"
    },
    "/search/": {
      "filePath": "search/index.tsx"
    },
    "/shed-register/": {
      "filePath": "shed-register/index.tsx"
    },
    "/admin/posts/approved/$postId": {
      "filePath": "admin/posts/approved/$postId.lazy.tsx"
    },
    "/admin/posts/pending/$postId": {
      "filePath": "admin/posts/pending/$postId.lazy.tsx"
    },
    "/admin/users/manage/$profileId": {
      "filePath": "admin/users/manage/$profileId.lazy.tsx"
    },
    "/admin/posts/approved/": {
      "filePath": "admin/posts/approved/index.lazy.tsx"
    },
    "/admin/posts/pending/": {
      "filePath": "admin/posts/pending/index.lazy.tsx"
    },
    "/admin/posts/rejected/": {
      "filePath": "admin/posts/rejected/index.lazy.tsx"
    },
    "/admin/users/manage/": {
      "filePath": "admin/users/manage/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
